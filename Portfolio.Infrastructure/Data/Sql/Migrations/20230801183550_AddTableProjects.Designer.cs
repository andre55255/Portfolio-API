// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Portfolio.Infrastructure.Data.Sql.Context;

#nullable disable

namespace Portfolio.Infrastructure.Data.Sql.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20230801183550_AddTableProjects")]
    partial class AddTableProjects
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("aspnetroles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "c1673366-a329-46a6-9d87-d9aac990154a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e6a48f2f-aff7-47a8-8ca2-111cc96150a8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("aspnetrole_claims", (string)null);
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(6126))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(6275))
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("aspnetusers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b14b0be-9dcf-4dd2-ab96-c577c1572ed9",
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 366, DateTimeKind.Local).AddTicks(1332),
                            Email = "andre_luiz.b5@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "ALB Portfolio",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRE_LUIZ.B5@OUTLOOK.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEC8pHlTgpucGonLT9QEpRxmHNjD1JbuAj3Xbs0fvyvnQV4aOpFFrbTdALWA2EYgZ7g==",
                            PhoneNumber = "31 995600166",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0f5f963-89f4-4121-bf15-5a8a842bcbd5",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 366, DateTimeKind.Local).AddTicks(1343),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("aspnetuser_claims", (string)null);
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("aspnetuser_logins", (string)null);
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("aspnetuser_roles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("aspnetuser_tokens", (string)null);
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(6887))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Extra")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("extra");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(7028))
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5424),
                            Token = "EMAIL_LOGIN",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5425),
                            Value = "todo"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5428),
                            Token = "EMAIL_PASSWORD",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5428),
                            Value = "todo"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5429),
                            Token = "EMAIL_PORT",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5429),
                            Value = "todo"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5430),
                            Token = "EMAIL_SMTP",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5430),
                            Value = "todo"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5431),
                            Token = "ATTEMPTS_LOGIN_ERROR",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5431),
                            Value = "todo"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5432),
                            Token = "ATTEMPTS_LOGIN_ERROR_DAYS_BLOCK",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5433),
                            Value = "todo"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5433),
                            Token = "MINUTES_EXPIRES_ACCESS_TOKEN",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5434),
                            Value = "todo"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5434),
                            Token = "MINUTES_EXPIRES_REFRESH_TOKEN",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5435),
                            Value = "todo"
                        });
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.ContactMe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("contact");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(7493))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(7630))
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("contact_me");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.ExperienceEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(9834))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("disabled_at");

                    b.Property<string>("EducationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("education_name");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("InstituitionLocalization")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("instituition_localization");

                    b.Property<string>("InstituitionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("instituition_name");

                    b.Property<int>("JourneyWorkStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("journey_work_status_id");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(9997))
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("JourneyWorkStatusId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("experience_education");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.ExperienceWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyLocalization")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("company_localization");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 368, DateTimeKind.Local).AddTicks(1667))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("disabled_at");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("JourneyWorkStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("journey_work_status_id");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("office_name");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 368, DateTimeKind.Local).AddTicks(1802))
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("JourneyWorkStatusId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("experience_work");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.GenericType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 368, DateTimeKind.Local).AddTicks(2847))
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 368, DateTimeKind.Local).AddTicks(2957))
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("value");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("boolean")
                        .HasColumnName("value_bool");

                    b.HasKey("Id");

                    b.ToTable("generic_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5487),
                            Description = "Status de jornada experiência de trabalho",
                            Token = "EXPERIENCE_WORK_STATUS",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5488),
                            Value = "Integral"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5489),
                            Description = "Status de jornada experiência de trabalho",
                            Token = "EXPERIENCE_WORK_STATUS",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5490),
                            Value = "Meio período"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5491),
                            Description = "Status de jornada experiência de trabalho",
                            Token = "EXPERIENCE_WORK_STATUS",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5491),
                            Value = "Noturna"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5492),
                            Description = "Status de jornada experiência de trabalho",
                            Token = "EXPERIENCE_WORK_STATUS",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5492),
                            Value = "Turno"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5493),
                            Description = "Status de faculdade/curso experiência de trabalho",
                            Token = "EDUCATION_STATUS",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5493),
                            Value = "Em curso"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5494),
                            Description = "Status de faculdade/curso experiência de trabalho",
                            Token = "EDUCATION_STATUS",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5494),
                            Value = "Concluído"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5495),
                            Description = "Status de faculdade/curso experiência de trabalho",
                            Token = "EDUCATION_STATUS",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5495),
                            Value = "Incompleto"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5496),
                            Description = "Status de faculdade/curso experiência de trabalho",
                            Token = "EDUCATION_STATUS",
                            UpdatedAt = new DateTime(2023, 8, 1, 15, 35, 50, 367, DateTimeKind.Local).AddTicks(5496),
                            Value = "Trancado"
                        });
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.PortfolioConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("about_me");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 368, DateTimeKind.Local).AddTicks(7709))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("firstname");

                    b.Property<string>("GithubLink")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("github_link");

                    b.Property<string>("KeyAccess")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("key_access");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("lastname");

                    b.Property<string>("LinkedinLink")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("linkedin_link");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 368, DateTimeKind.Local).AddTicks(7836))
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("portfolio");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.PortfolioConfigUsersAssociate", b =>
                {
                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("PortfolioId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("portfolio_users");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 368, DateTimeKind.Local).AddTicks(8542))
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("disabled_at");

                    b.Property<string>("LinkPreview")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("link_preview");

                    b.Property<string>("LinkViewCode")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("link_view_code");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.Property<string>("Techs")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("techs");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2023, 8, 1, 15, 35, 50, 368, DateTimeKind.Local).AddTicks(8684))
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("project");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetRoleClaim", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Identity.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUserClaim", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUserLogin", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUserRole", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Identity.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portfolio.Core.Entities.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUserToken", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.ContactMe", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Sql.PortfolioConfig", "Portfolio")
                        .WithMany("Contacts")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.ExperienceEducation", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Sql.GenericType", "JourneyWorkStatus")
                        .WithMany("ExperiencesEducations")
                        .HasForeignKey("JourneyWorkStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Portfolio.Core.Entities.Sql.PortfolioConfig", "Portfolio")
                        .WithMany("ExperiencesEducations")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JourneyWorkStatus");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.ExperienceWork", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Sql.GenericType", "JourneyWorkStatus")
                        .WithMany("ExperiencesWorks")
                        .HasForeignKey("JourneyWorkStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Portfolio.Core.Entities.Sql.PortfolioConfig", "Portfolio")
                        .WithMany("ExperiencesWorks")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JourneyWorkStatus");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.PortfolioConfigUsersAssociate", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Sql.PortfolioConfig", "Portfolio")
                        .WithMany("PortolioUsersAssociates")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Portfolio.Core.Entities.Identity.AspNetUser", "User")
                        .WithMany("PortolioUsersAssociates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.Project", b =>
                {
                    b.HasOne("Portfolio.Core.Entities.Sql.PortfolioConfig", "Portfolio")
                        .WithMany("Projects")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Identity.AspNetUser", b =>
                {
                    b.Navigation("PortolioUsersAssociates");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.GenericType", b =>
                {
                    b.Navigation("ExperiencesEducations");

                    b.Navigation("ExperiencesWorks");
                });

            modelBuilder.Entity("Portfolio.Core.Entities.Sql.PortfolioConfig", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("ExperiencesEducations");

                    b.Navigation("ExperiencesWorks");

                    b.Navigation("PortolioUsersAssociates");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
